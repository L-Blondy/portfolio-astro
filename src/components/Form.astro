---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'form'> {
   action: string;
   method: 'get' | 'post' | 'put' | 'patch' | 'delete';
}
---

<form data-enhanced-form {...Astro.props}><slot /></form>

<!-- Touched handler -->
<script defer>
   document.querySelectorAll('[data-enhanced-form]').forEach((form) => {
      form.addEventListener('reset', (e) => {
         [...form.elements].forEach((element) => {
            element.classList.remove('touched');
         });
      });
      [...form.elements].forEach((element) => {
         element.addEventListener('invalid', (e) => {
            element.classList.add('touched');
         });
         element.addEventListener('blur', (e) => {
            element.classList.add('touched');
         });
      });
   });
</script>

<!-- Submit handler -->
<script defer>
   let isSubmitting = false;

   const submitFormFetcher = ({ url, method, formData }) => {
      if (isSubmitting) return;
      isSubmitting = true;
      let ok = false;
      function request() {
         // GET does not have a request body, params are passed in the search query string
         if (method.toLowerCase() === 'get') {
            const search = new URLSearchParams(formData).toString();
            return fetch(`${url}?${search}`, {
               method,
               credentials: 'same-origin',
            });
         }
         // For other methods, just use the body
         else {
            return fetch(url, {
               method,
               body: formData,
               credentials: 'same-origin',
            });
         }
      }
      return request()
         .then((res) => {
            ok = res.ok;
            return res.json();
         })
         .then((data) => {
            isSubmitting = false;
            if (ok) {
               return Promise.resolve(data);
            } else {
               return Promise.reject(data);
            }
         });
   };

   document.querySelectorAll('[data-enhanced-form]').forEach((form) => {
      form.addEventListener('submit', (e) => {
         e.preventDefault();
         const url = form.action;
         const method = form.method;
         const formData = new FormData(form);
         submitFormFetcher({ url, formData, method })
            .then((data) => {
               if (!form) return;
               const successEvent = new CustomEvent('submit-success', {
                  detail: data,
               });
               form.dispatchEvent(successEvent);
            })
            .catch((error) => {
               if (!form) return;
               const errorEvent = new CustomEvent('submit-error', {
                  detail: error,
               });
               form.dispatchEvent(errorEvent);
            });
      });
   });
</script>
